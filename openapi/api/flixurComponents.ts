/**
 * Generated by @openapi-codegen
 *
 * @version 0.0.1
 */
import type * as Fetcher from "./flixurFetcher";
import { flixurFetch } from "./flixurFetcher";
import type * as Schemas from "./flixurSchemas";

export type GetGreetingByNamePathParams = {
  /**
   * Name to greet
   *
   * @example world
   * @maxLength 30
   */
  name: string;
};

export type GetGreetingByNameError = Fetcher.ErrorWrapper<undefined>;

export type GetGreetingByNameVariables = {
  pathParams: GetGreetingByNamePathParams;
};

export const getGreetingByName = (variables: GetGreetingByNameVariables, signal?: AbortSignal) =>
  flixurFetch<
    Schemas.GreetingOutputBody,
    GetGreetingByNameError,
    undefined,
    {},
    {},
    GetGreetingByNamePathParams
  >({ url: "/greeting/{name}", method: "get", ...variables, signal });

export type ArtistSearchError = Fetcher.ErrorWrapper<undefined>;

export type ArtistSearchVariables = {
  body: Schemas.ArtistSearchRequest;
};

/**
 * Search for an artist by name.
 */
export const artistSearch = (variables: ArtistSearchVariables, signal?: AbortSignal) =>
  flixurFetch<
    Schemas.ArtistSearchOutputBody,
    ArtistSearchError,
    Schemas.ArtistSearchRequest,
    {},
    {},
    {}
  >({ url: "/music/artists/search", method: "post", ...variables, signal });

export const operationsByTag = {
  music: { artistSearch },
  artists: { artistSearch },
  search: { artistSearch },
};
